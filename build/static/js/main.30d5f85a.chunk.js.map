{"version":3,"sources":["serviceWorker.js","components/functional/buttonFunctionl.js","components/ref/refComponent3.js","components/ref/refComponent2.js","components/ref/refComponent.js","components/fragmentChild.js","index.js","components/fragment.js"],"names":["Boolean","window","location","hostname","match","CallFromHere","click","type","onClick","defaultProps","console","log","ButtonFunc","Ref3","React","Component","MyRefComponent","forwardRef","props","ref","htmlFor","name","value","data","placeholder","RefComponent","state","counter","firstRef","createRef","inputRef","cbInRef","Element","myHandler","bind","e","this","preventDefault","focus","setState","fragmentChild","id","map","item","Fragment","key","App","lazy","Display","Add","Edit","Delete","Query","Filter","EmpView","Paginate","PageEmp","routing","Suspense","fallback","className","aria-current","class","href","exact","path","component","RefCom","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.30d5f85a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst ButtonFunc=()=>\n{\n    const newFunc=()=>\n    {\n        console.log('click from button function.')\n    };\n\n    return(\n    <CallFromHere click={newFunc}></CallFromHere>\n    // <\n    );\n\n};\n\n\n\nconst CallFromHere=({click})=>\n{\n    return(\n        <div>\n            <p>\n                <button type='button'  onClick={click} >Button</button>\n            </p>\n        </div>\n    )\n\n\n\n};\nCallFromHere.defaultProps = {\n    click: () => console.log('Default'),\n  };\n\n\nexport default ButtonFunc;","import React from 'react';\n\n\nclass Ref3 extends React.Component\n{\n\n    render()\n    {\n\n        return(\n            <table>\n                <tbody>\n                    <td>\n                        <div>\n                            hello\n                        </div>\n                    </td>\n                </tbody>\n            </table>\n        )\n    }\n\n};\n\n\nexport default Ref3;","//accessing ref using props\n// import React from 'react';\n\n// class MyRefComponent extends React.Component\n// {\n//     constructor(props) {\n//         super(props)\n//     }\n\n//     render()\n//     {\n//         return(\n//             <div>\n               \n//                  <form>\n//             <label htmlFor=\"name\">Enter Name:</label>\n//             <br></br>\n//         <input type=\"text\" name=\"name\" ref={this.props.myRef} placeholder=\"enter name\"/>\n//         <br>\n//         </br>\n//         </form>\n//             </div>\n           \n//         )\n//     }\n\n// };\n\n// export default MyRefComponent;\n\n\n\n//forward ref from parent component usinf react's forwardRef method\nimport React from 'react';\nimport Ref3Compo from './refComponent3';\n\nconst MyRefComponent =React.forwardRef((props,ref)=>\n{\n    return(\n        <div>\n           <form>\n             <label htmlFor=\"name\">Enter Name:</label>\n             <br></br>\n            <input type=\"text\" name=\"name\" value={props.data} ref={ref} placeholder=\"enter name\"/>\n             <br>\n             </br>\n         </form>\n         <Ref3Compo/>\n             </div>\n    )\n});\n\nexport default MyRefComponent;","import React from 'react'\n\nimport RefCom from './refComponent2';\n\n\nclass RefComponent extends React.Component {\n  \n    constructor(props) {\n        super(props);\n        this.state={\n            counter:0\n        }\n    \n        this.firstRef=React.createRef();// one way to create a ref\n        //second way to create a ref in react is to use callback ref\n        this.inputRef=null;\n        this.cbInRef=(Element)=>\n        {\n            this.inputRef=Element;\n        }\n        this.myHandler=this.myHandler.bind(this);\n    }\n    \n     myHandler(e)\n    {\n        let {counter}=this.state;\n        e.preventDefault();\n        // this.firstRef.current.focus()\n        \n        \n        \n        if(this.inputRef)\n        {\n            this.inputRef.focus();\n        }\n        this.setState({\n            counter:counter+1\n        });\n\n    }\n  \n  render()\n  {\n    return (\n        <div>\n            <form>\n                {/*  passing ref using props to child component */}\n              {/* <RefCom myRef={this.cbInRef}/> */}\n\n\n              {/* passing ref  to child component as forward ref */}\n              <RefCom  ref={this.cbInRef}  data={this.state.counter}/>\n              {/* <RefCom  myRef={this.firstRef} data={this.state.counter}/> */}\n            <button type='button'  onClick={this.myHandler}>Focus</button>\n            </form>\n            <h4>\n                counter is {this.state.counter}\n            </h4>\n        </div>\n    )\n  }\n    \n};\n\nexport default RefComponent;\n\n\n//ref using functional component\n// import React from 'react';\n\n// const RefComponent=()=>\n// {\n//    const myRef = React.useRef(null);\n//    const myHandler=(e)=>\n//    {\n//     e.preventDefault();\n//     myRef.current.focus();\n//    }\n\n//    return(\n//        <div>\n//            <form>\n//                <label>\n//                    Name:\n//                </label>\n//                <br>\n//                </br>\n//              <input type='text' ref={myRef} name='name' placeholder='enter name'/>  \n//              <br>\n//              </br>\n//              <button type='button' style={{color:'brown'}} onClick={myHandler}>Focus</button>\n//            </form>\n//        </div>\n//    )\n\n// };\n\n\n// export default RefComponent;","import React, { Component, Fragment } from 'react'\n\nexport default class fragmentChild extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n             data:[\n                 {\n                     name:'maulik',\n                     id:1\n                 },\n                 {\n                     name:'mj',\n                     id:2\n                 }\n             ]\n        }\n    }\n    \n    render() {\n        return (\n            <tr>\n        {this.state.data.map(item => (\n        <React.Fragment key={item.id}>\n            <p> <td>name is: {item.name}</td></p>\n         \n        </React.Fragment>\n      ))}\n    </tr>  \n\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import Display from './components/empDisplay';\n// import Add from './components/empAdd';\nimport { Route, Link, NavLink, BrowserRouter as Router } from 'react-router-dom'\n// import Edit from './components/empEdit';\n// import Delete from './components/empDelete';\n// import Search from  './components/search';\n// import Query from './components/query'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import Filter from './components/empFilter';\n// import EmpView from './components/empView';\n// import Paginate from './components/empPagination';\nimport Func from './components/functional/addFunctional'\nimport GetFunctional from './components/functional/mountGetFunctional';\nimport RefCom from './components/ref/refComponent';\nimport FragCom from './components/fragment';\n\n// lazy components\nconst App = React.lazy(() => import('./App'));\nconst Display=React.lazy(()=>import('./components/display/empDisplay'));\nconst Add=React.lazy(()=>import('./components/add/empAdd'));\nconst Edit=React.lazy(()=>import('./components/edit/empEdit'));\nconst Delete=React.lazy(()=>import('./components/delete/empDelete'));\nconst Query=React.lazy(()=>import('./components/singleView/query'));\nconst Filter=React.lazy(()=>import('./components/search/empFilter'));\nconst EmpView=React.lazy(()=>import('./components/singleView/empView'));\nconst Paginate=React.lazy(()=>import('./components/empPagination'));\nconst PageEmp=React.lazy(()=>import('./components/comp-1'));\n\nlet routing = (\n  <React.Suspense fallback={<div>\n    <p>\n      Menu is loading.\n    </p>\n  </div>}>\n <Router>\n    <div>\n      <div>\n        <ul className=\"header\">\n          {/* {/* <li ><a aria-current=\"true\" class=\"active\" href=\"/\">Home</a></li> */}\n\n          <li ><a aria-current=\"true\" class=\"active\" href=\"/\">Home</a></li>\n           <li><a aria-current=\"true\" class=\"active\" href=\"/add\">Add New Employee</a></li> \n           <li><a aria-current=\"true\" class=\"active\" href=\"/show\">Display Employees</a></li> \n           <li><a aria-current=\"true\" class=\"active\" href=\"/filter\">Search Employee</a></li> \n        <li><a aria-current=\"true\" class=\"active\" href=\"/page\">Pagination</a></li> \n          {/* <li><a aria-current=\"true\" class=\"active\" href=\"/myDemo\">new page</a></li> */}\n          <li><a aria-current=\"true\" class=\"active\" href=\"/myPage\">react pagination</a></li>\n          <li><a aria-current=\"true\" class=\"active\" href=\"/ref\">react ref</a></li>\n        </ul>\n      </div>\n\n     <Route exact path='/' component={App} />\n       <Route path='/add/' component={Add} />\n      <Route path='/show' component={Display} />\n      <Route path='/edit/:id' component={Edit}/>\n      <Route path='/delete/:id' component={Delete}/>\n      <Route path='/viewById/:id' component={EmpView}/>\n     <Route path='/filter' component={Filter}/>\n      <Route exact path='/view/' component={Query}/>\n      <Route  path='/page/:limit/:pageNo' component={Paginate}/>\n      <Route path='/myPage' component={PageEmp}/>\n      <Route path='/ref/' component={RefCom}/>\n      {/* <Route path='/myDemo' component={NewPagi}></Route> */}\n\n\n   </div>\n  </Router>\n  </React.Suspense>\n \n);\n\n\n\n\n\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n\n\n// ReactDOM.render(<Query/>,document.getElementById('root'));\n\n\n// functional component\n// ReactDOM.render(\n//   <GetFunctional/>,document.getElementById('root')\n// )\n\n\n\n// ReactDOM.render(<GetFunctional/>,document.getElementById('root'));\n\n// ReactDOM.render(<FragCom/>,document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport FragChildCom from './fragmentChild';\n\nexport default class fragment extends Component {\n    render() {\n        return (\n           <table>\n               <tbody>\n                    <FragChildCom/>\n               </tbody>\n           </table>\n        )\n    }\n}\n"],"sourceRoot":""}