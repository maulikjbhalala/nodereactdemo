{"version":3,"sources":["serviceWorker.js","components/buttonFunctionl.js","index.js"],"names":["Boolean","window","location","hostname","match","CallFromHere","click","type","onClick","defaultProps","console","log","ButtonFunc","App","React","lazy","Display","Add","Edit","Delete","Query","Filter","EmpView","Paginate","PageEmp","routing","Suspense","fallback","className","aria-current","class","href","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCAAC,G,WAAa,SAAC,GACnB,IADoBC,EACrB,EADqBA,MAEjB,OACI,6BACI,2BACI,4BAAQC,KAAK,SAAUC,QAASF,GAAhC,cAQhBD,EAAaI,aAAe,CACxBH,MAAO,kBAAMI,QAAQC,IAAI,a,kBAIdC,IChBTC,EAAMC,IAAMC,MAAK,kBAAM,kCACvBC,EAAQF,IAAMC,MAAK,kBAAI,wDACvBE,EAAIH,IAAMC,MAAK,kBAAI,wDACnBG,EAAKJ,IAAMC,MAAK,kBAAI,kCACpBI,EAAOL,IAAMC,MAAK,kBAAI,iCAEtBK,GADON,IAAMC,MAAK,kBAAI,wDAChBD,IAAMC,MAAK,kBAAI,mCACrBM,EAAOP,IAAMC,MAAK,kBAAI,iCACtBO,EAAQR,IAAMC,MAAK,kBAAI,kCACvBQ,EAAST,IAAMC,MAAK,kBAAI,iCACxBS,EAAQV,IAAMC,MAAK,kBAAI,iCAEzBU,EACF,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,6BACxB,iDAIH,kBAAC,IAAD,KACG,6BACE,6BACE,wBAAIC,UAAU,UAGZ,4BAAK,uBAAGC,eAAa,OAAOC,MAAM,SAASC,KAAK,KAA3C,SACJ,4BAAI,uBAAGF,eAAa,OAAOC,MAAM,SAASC,KAAK,QAA3C,qBACJ,4BAAI,uBAAGF,eAAa,OAAOC,MAAM,SAASC,KAAK,SAA3C,sBACJ,4BAAI,uBAAGF,eAAa,OAAOC,MAAM,SAASC,KAAK,WAA3C,oBACP,4BAAI,uBAAGF,eAAa,OAAOC,MAAM,SAASC,KAAK,SAA3C,eAEF,4BAAI,uBAAGF,eAAa,OAAOC,MAAM,SAASC,KAAK,WAA3C,uBAIT,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IAC/B,kBAAC,IAAD,CAAOoB,KAAK,QAAQC,UAAWjB,IAChC,kBAAC,IAAD,CAAOgB,KAAK,QAAQC,UAAWlB,IAC/B,kBAAC,IAAD,CAAOiB,KAAK,YAAYC,UAAWhB,IACnC,kBAAC,IAAD,CAAOe,KAAK,cAAcC,UAAWf,IACrC,kBAAC,IAAD,CAAOc,KAAK,gBAAgBC,UAAWZ,IACxC,kBAAC,IAAD,CAAOW,KAAK,UAAUC,UAAWb,IAChC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,SAASC,UAAWd,IACtC,kBAAC,IAAD,CAAQa,KAAK,uBAAuBC,UAAWX,IAC/C,kBAAC,IAAD,CAAOU,KAAK,UAAUC,UAAWV,OAevCW,IAASC,OACPX,EACAY,SAASC,eAAe,SFmDpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.56fd48a0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst ButtonFunc=()=>\n{\n    const newFunc=()=>\n    {\n        console.log('click from button function.')\n    };\n\n    return(\n    <CallFromHere click={newFunc}></CallFromHere>\n    // <\n    );\n\n};\n\n\n\nconst CallFromHere=({click})=>\n{\n    return(\n        <div>\n            <p>\n                <button type='button'  onClick={click} >Button</button>\n            </p>\n        </div>\n    )\n\n\n\n};\nCallFromHere.defaultProps = {\n    click: () => console.log('Default'),\n  };\n\n\nexport default ButtonFunc;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import Display from './components/empDisplay';\n// import Add from './components/empAdd';\nimport { Route, Link, NavLink, BrowserRouter as Router } from 'react-router-dom'\n// import Edit from './components/empEdit';\n// import Delete from './components/empDelete';\n// import Search from  './components/search';\n// import Query from './components/query'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import Filter from './components/empFilter';\n// import EmpView from './components/empView';\n// import Paginate from './components/empPagination';\nimport Func from './components/addFunctional'\nimport GetFunctional from './components/mountGetFunctional';\n\n// lazy components\nconst App = React.lazy(() => import('./App'));\nconst Display=React.lazy(()=>import('./components/empDisplay'));\nconst Add=React.lazy(()=>import('./components/empAdd'));\nconst Edit=React.lazy(()=>import('./components/empEdit'));\nconst Delete=React.lazy(()=>import('./components/empDelete'));\nconst Search=React.lazy(()=>import('./components/search'));\nconst Query=React.lazy(()=>import('./components/query'));\nconst Filter=React.lazy(()=>import('./components/empFilter'));\nconst EmpView=React.lazy(()=>import('./components/empView'));\nconst Paginate=React.lazy(()=>import('./components/empPagination'));\nconst PageEmp=React.lazy(()=>import('./components/comp-1'));\n\nlet routing = (\n  <React.Suspense fallback={<div>\n    <p>\n      Menu is loading.\n    </p>\n  </div>}>\n <Router>\n    <div>\n      <div>\n        <ul className=\"header\">\n          {/* {/* <li ><a aria-current=\"true\" class=\"active\" href=\"/\">Home</a></li> */}\n\n          <li ><a aria-current=\"true\" class=\"active\" href=\"/\">Home</a></li>\n           <li><a aria-current=\"true\" class=\"active\" href=\"/add\">Add New Employee</a></li> \n           <li><a aria-current=\"true\" class=\"active\" href=\"/show\">Display Employees</a></li> \n           <li><a aria-current=\"true\" class=\"active\" href=\"/filter\">Search Employee</a></li> \n        <li><a aria-current=\"true\" class=\"active\" href=\"/page\">Pagination</a></li> \n          {/* <li><a aria-current=\"true\" class=\"active\" href=\"/myDemo\">new page</a></li> */}\n          <li><a aria-current=\"true\" class=\"active\" href=\"/myPage\">react pagination</a></li>\n        </ul>\n      </div>\n\n     <Route exact path='/' component={App} />\n       <Route path='/add/' component={Add} />\n      <Route path='/show' component={Display} />\n      <Route path='/edit/:id' component={Edit}/>\n      <Route path='/delete/:id' component={Delete}/>\n      <Route path='/viewById/:id' component={EmpView}/>\n     <Route path='/filter' component={Filter}/>\n      <Route exact path='/view/' component={Query}/>\n      <Route  path='/page/:limit/:pageNo' component={Paginate}/>\n      <Route path='/myPage' component={PageEmp}/>\n      {/* <Route path='/myDemo' component={NewPagi}></Route> */}\n\n\n   </div>\n  </Router>\n  </React.Suspense>\n \n);\n\n\n\n\n\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n\n\n// ReactDOM.render(<Query/>,document.getElementById('root'));\n\n\n// functional component\n// ReactDOM.render(\n//   <GetFunctional/>,document.getElementById('root')\n// )\n\n\n\n// ReactDOM.render(<GetFunctional/>,document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}